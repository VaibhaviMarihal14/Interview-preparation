Solution for question 1.

#include <iostream>
#include <unordered_map>

void findPair(int arr[], int n, int sum)
{
	std::unordered_map<int, int> map;

	for (int i = 0; i < n; i++)
	{
		if (map.find(sum - arr[i]) != map.end())
		{
			std::cout << "Pair found at index " << map[sum - arr[i]] <<" and " << i;
			return;
		}
		map[arr[i]] = i;
	}
	std::cout << "Pair not found";
}
int main()
{
	int arr[] = { 8, 7, 2, 5, 3, 1};
	int sum = 10;

	int n = sizeof(arr)/sizeof(arr[0]);

	findPair(arr, n, sum);

	return 0;
}

Output :
pair found at index 0 and 2











Solution for question 2.

#include <iostream>
#include <unordered_map>
using namespace std;

void printallSubarrays(int arr[], int n)
{
	for (int i = 0; i < n; i++)
	{
		int sum = 0;

		for (int j = i; j < n; j++)
		{
			sum += arr[j];

			if (sum == 0) {
				cout << "Subarray [" << i << ".." << j << "]\n";
			}
		}
	}
}

int main()
{
	int arr[] = { 3, 4, -7, 3, 1, 3, 1, -4, -2, -2 };
	int n = sizeof(arr)/sizeof(arr[0]);

	printallSubarrays(arr, n);

	return 0;
}

Output :

Subarray [0..2]
Subarray [0..9]
Subarray [1..3]
Subarray [2..5]
Subarray [3..9]
Subarray [5..7]












Solution for question 3.

#include <iostream> 
using namespace std; 

void sortBinaryArray(int a[], int n) 
{ 
	int j = -1; 
	for (int i = 0; i < n; i++) { 
		if (a[i] < 1) { 
			j++; 
			swap(a[i], a[j]); 
		} 
	} 
} 
int main() 
{ 
	int a[] = { 0, 0, 1, 0, 1, 1, 0, 1, 0, 0 }; 
	int n = sizeof(a) / sizeof(a[0]); 
	sortBinaryArray(a, n); 
	for (int i = 0; i < n; i++) 
		cout << a[i] << " "; 

	return 0; 
} 

Output :
[0, 0, 0, 0, 0, 0, 1, 1, 1, 1]














Solution for question 4.

#include <iostream>
using namespace std;

int findDuplicate(int arr[], int n) {
	bool visited[n];
	fill(visited, visited + n, 0); 
	for (int i = 0; i < n; i++) {
		if (visited[arr[i]])
			return arr[i];
		visited[arr[i]] = true;
	}
	return -1;
}

int main()
{
	int arr[] = { 1, 2, 3, 4, 4 };
	int n = sizeof(arr) / sizeof(arr[0]);

	cout << "Duplicate element is " << findDuplicate(arr, n);

	return 0;
}


Output :
Duplicate element is 4












Solution for question 5.

#include<bits/stdc++.h> 
#include <stdlib.h> 
#include <time.h> 
using namespace std; 

void swap (int *a, int *b) 
{ 
	int temp = *a; 
	*a = *b; 
	*b = temp; 
} 

void printArray (int arr[], int n) 
{ 
	for (int i = 0; i < n; i++) 
		cout << arr[i] << " "; 
	cout << "\n"; 
} 

void randomize (int arr[], int n) 
{ 
	srand (time(NULL)); 

	for (int i = n - 1; i > 0; i--) 
	{ 
		int j = rand() % (i + 1); 
 
		swap(&arr[i], &arr[j]); 
	} 
} 

int main() 
{ 
	int arr[] = {1, 2, 3, 4, 5, 6, 7, 8}; 
	int n = sizeof(arr) / sizeof(arr[0]); 
	randomize (arr, n); 
	printArray(arr, n); 

	return 0; 
} 

Output :
[2, 4, 1, 5, 3, 6]