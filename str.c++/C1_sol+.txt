Solution for question 1.

# include <iostream> 
using namespace std; 
# define NO_OF_CHARS 256 

class test
{ 
	public : 
	void fillCharCounts(char *str, int *count) 
	{ 
		int i; 
		for (i = 0; *(str + i); i++) 
		count[*(str + i)]++; 
	} 
	void printDups(char *str) 
	{ 
		int *count = (int *)calloc(NO_OF_CHARS, sizeof(int)); 
		fillCharCounts(str, count); 

		int i; 
		for (i = 0; i < NO_OF_CHARS; i++) 
		if(count[i] > 1) 
			printf("%c, count = %d \n", i, count[i]); 

		free(count); 
	} 
}; 
int main() 
{ 
	test t ; 
	char str[] = "test string"; 
	t.printDups(str); 
	return 0; 
} 


Output :
s,  count = 2
t,  count = 3











Solution for question 2.

#include <iostream>
#include <string.h>
using namespace std;
int main()
{
    char str1[20], str2[20];
    int i, j, len = 0, flag = 0;
    cout << "Enter the string : ";
    gets(str1);
    len = strlen(str1) - 1;
    for (i = len, j = 0; i >= 0 ; i--, j++)
        str2[j] = str1[i];
    if (strcmp(str1, str2))
        flag = 1;
    if (flag == 1)
        cout << str1 << " is not a palindrome";
    else
        cout << str1 << " is a palindrome";
    return 0;
}

Output :
Enter the string : nun
nun is a palindrome









Solution for question 3.

#include <iostream> 
using namespace std; 

void print(string str) 
{ 
	cout << str[0]; 
	for (int i=1; str[i]!='\0'; i++) 
	{ 
		if ((str[i] == str[i-1]+1) || 
			(str[i] == str[i-1]-1)) 
			cout << str[i]; 
		else
			cout << "\n" << str[i];; 
	} 
} 
int main() 
{ 
	string str = "ABCXYZACCD"; 
	print(str); 
	return 0; 
} 
Output:

ABC
XYZ
A
C
CD









Solution for question 4.

#include <bits/stdc++.h> 
using namespace std; 

int main() 
{ 

	char string1[100], string2[100]; 
	cin >> string1; 
	cout << "Enter the first string: " << string1; 
	cin >> string2; 
	cout << "\nEnter the second string: " << string2; 

	cout << "\nAre both strings same: "; 

	if (strcmp(string1, string2) == 0) 
	{ 
		cout << "Yes"; 
	} 
	else { 
		cout << "No"; 
	} 

	return 0; 
} 











Solution for question 5.

#include <bits/stdc++.h> 
using namespace std; 

int isSubstring(string s1, string s2) 
{ 
	int M = s1.length(); 
	int N = s2.length(); 
	for (int i = 0; i <= N - M; i++) { 
		int j; 

		for (j = 0; j < M; j++) 
			if (s2[i + j] != s1[j]) 
				break; 

		if (j == M) 
			return i; 
	} 

	return -1; 
} 
int main() 
{ 
	string s1 = "for"; 
	string s2 = "goodforyou"; 
	int res = isSubstring(s1, s2); 
	if (res == -1) 
		cout << "Not present"; 
	else
		cout << "Present at index " << res; 
	return 0; 
} 
Output:
Present at index 4
