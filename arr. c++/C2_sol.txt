Solution for question 1.

#include <bits/stdc++.h> 
using namespace std; 

int equilibrium(int arr[], int n) 
{ 
	int i, j; 
	int leftsum, rightsum; 

	for (i = 0; i < n; ++i) 
	{	 
		leftsum = 0; 
		for (j = 0; j < i; j++) 
			leftsum += arr[j]; 

		rightsum = 0; 
		for (j = i + 1; j < n; j++) 
			rightsum += arr[j]; 

		if (leftsum == rightsum) 
			return i; 
	} 
	return -1; 
} 
int main() 
{ 
	int arr[] = { -7, 1, 5, 2, -4, 3, 0 }; 
	int arr_size = sizeof(arr) / sizeof(arr[0]); 
	cout << equilibrium(arr, arr_size); 
	return 0; 
} 

Output :
3















Solution for question 2.

#include <iostream> 
using namespace std; 
 
void pushZerosToEnd(int arr[], int n) 
{ 
	int count = 0; 

	for (int i = 0; i < n; i++) 
		if (arr[i] != 0) 
			arr[count++] = arr[i]; 

	for (int i = count; i < n; i++)
		arr[i] = 0; 
} 

int main() 
{ 
	int arr[] = { 6, 0, 8, 2, 3, 0, 4, 0, 1 }; 
	int n = sizeof(arr) / sizeof(arr[0]); 
	pushZerosToEnd(arr, n);  
	for (int i = 0; i < n; i++) 
		cout << arr[i] << " "; 
	return 0; 
} 

Output :
6 8 2 3 4 1 0 0 0 











Solution for question 3.

#include <bits/stdc++.h> 
using namespace std; 

int linearSearch(int arr[], int n) 
{ 
	int i; 
	for(i = 0; i < n; i++) 
	{ 
		if(arr[i] == i) 
			return i; 
	} 
	return -1; 
} 

int main() 
{ 
	int arr[] = {-10, -1, 0, 3, 10, 11, 30, 50, 100}; 
	int n = sizeof(arr)/sizeof(arr[0]); 
	cout << "Fixed Point is " << linearSearch(arr, n); 
	return 0; 
} 


Output:
Fixed Point is 3













Solution for question 4.

#include <bits/stdc++.h> 
using namespace std; 

int getInvCount(int arr[], int n) 
{ 
	int inv_count = 0; 
	for (int i = 0; i < n - 1; i++) 
		for (int j = i + 1; j < n; j++) 
			if (arr[i] > arr[j]) 
				inv_count++; 

	return inv_count; 
} 
 
int main() 
{ 
	int arr[] = { 1, 20, 6, 4, 5 }; 
	int n = sizeof(arr) / sizeof(arr[0]); 
	cout << " Number of inversions are " << getInvCount(arr, n); 
	return 0; 
} 

Output:
Number of inversions are 5
















Solution for question 5.

#include <bits/stdc++.h> 
using namespace std; 
void rvereseArray(int arr[], int start, int end) 
{ 
	while (start < end) 
	{ 
		int temp = arr[start]; 
		arr[start] = arr[end]; 
		arr[end] = temp; 
		start++; 
		end--; 
	} 
}	 

void printArray(int arr[], int size) 
{ 
for (int i = 0; i < size; i++) 
cout << arr[i] << " "; 

cout << endl; 
} 

int main() 
{ 
	int arr[] = {1, 2, 3, 4, 5, 6}; 
	
	int n = sizeof(arr) / sizeof(arr[0]); 

	printArray(arr, n); 
	rvereseArray(arr, 0, n-1); 
	
	cout << "Reversed array is" << endl; 
	printArray(arr, n); 
	
	return 0; 
} 

Output :
1 2 3 4 5 6 
Reversed array is 
6 5 4 3 2 1 
